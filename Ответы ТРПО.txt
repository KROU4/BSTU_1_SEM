1. Цели и задачи технологий разработки ПО - создание высококачественного программного обеспечения, ориентированного на потребности пользователя, в минимально возможное время и за минимальные затраты. Современные проекты разработки ПО могут включать использование интернета и мобильных устройств, использование инструментов для процессов разработки и автоматизацию.

2. Программа - последовательность инструкций, выполняемая компьютером. Программный продукт - результат применения методов и инструментов программной инженерии для создания программного обеспечения. Программное обеспечение - программные продукты и их документация, используемая для обеспечения конкретной функциональности. Программная инженерия - применение инженерных принципов для проектирования, разработки, моделирования и поддержки программного обеспечения. Жизненный цикл ПО - цикл разработки программного продукта, начиная с его проектирования и заканчивая его использованием. Стандарты программной инженерии - совокупность правил и процессов, которые должны быть выполнены при разработке программного обеспечения.

3. Программное обеспечение может быть классифицировано как системное и пользовательское. Системное программное обеспечение является набором программ, необходимых для настройки, администрирования и управления компьютером и его приложениями. Пользовательское программное обеспечение является набором программ, необходимых для выполнения конкретных задач пользователя. Система программирования состоит из программных вычислительных методов, алгоритмов, программ и инструментов, необходимых для разработки и реализации программного обеспечения.

4. Visual Studio - интегрированная среда разработки, предназначенная для создания приложений для Windows, сетей, устройств и интернета. Она включает в себя компоненты для разработки, инструменты для отладки, отслеживания и управления кодом, а также средства для проектирования, которые позволяют разработчикам быстро и эффективно создавать приложения. В кодировке Windows-1251 символьная информация представлена в виде последовательности побайтовых кодов, которые соответствуют символам Unicode.


5. Компоненты классической системы программирования включают трансляторы, ассемблеры и интерпретаторы. Транслятор - это программа, которая преобразует исходный код на высокоуровневом языке программирования в машинный код, который может выполнять компьютер. Ассемблер - это программа, которая преобразует ассемблерный код в машинный код, который может выполнять компьютер. Интерпретатор - это программа, которая преобразует исходный код в машинный код последовательно и непрерывно, в отличие от транслятора, который преобразует исходный код в одно время.

6. Классическая система программирования состоит из нескольких этапов обработки исходного кода программы. В начале исходный код программы вводится в систему с помощью языка программирования. Язык программирования состоит из основных элементов, таких как алфавит языка программирования, символы времени трансляции, символы времени выполнения и т. д. Затем система программирования анализирует исходный код и преобразует его в объектный модуль. Далее объектный модуль отправляется на загрузку в компьютер, где он собирается в виде исполняемого файла.

7. Основные компоненты в системе программирования включают модели памяти. Они включают в себя код, статическую память, стек и динамическую память. Код - это инструкции, которые компьютер исполняет, а статическая память - это хранилище данных, которое используется для хранения информации и данных. Стек - это структура данных, которая используется для хранения данных и информации в определенном порядке. Динамическая память - это хранилище данных, которое используется для хранения данных в виде объектов.

8. Парадигмы программирования - это способы организации кода и алгоритмов, используемые для решения задач программирования. Используемые парадигмы программирования включают в себя объектно-ориентированное программирование, функциональное программирование и императивное программирование.

9. Язык программирования - это набор правил и синтаксиса для написания программ на компьютере. Язык программирования используется для описания действий компьютера. В процессе разработки программы используется исходный код, который затем компилируется в объектный код и после загрузки в компьютер преобразуется в исполняемый файл. Кроме того, используется оформление кода, которое определяет структуру программы и способствует читаемости кода.

10. Кодирование информации - это процесс преобразования данных и информации из одного вида в другой. Оно используется для представления информации в виде битов или байтов. Для кодирования информации используют различные кодировки, такие как ASCII, Unicode, UTF-8 и Base64.

11. Спецификация системы программирования - это правила и процедуры, определяющие какие языки и платформы программирования будут использоваться для разработки ПО, а также порядок интеграции и поддержки существующих приложений.

12. Кодирование информации - это процесс преобразования данных из одного представления в другое. Кодировка UNICODE - это стандарт кодирования символов, используемый для представления текста в различных платформах. Он основан на UCS (Universal Character Set), который использует последовательность байт для представления символов. Для представления данных в UNICODE используется две разные схемы кодирования: прямой (LE) и обратный (BE) порядок байт. BOM (Byte Order Mark) - это маркер порядка байт, используемый для обозначения того, в каком порядке байты в UNICODE кодированы. Он представляет собой небольшой префикс, который добавляется к данным, для обозначения порядка байт.

13. Этапы разработки программы включают в себя проектирование, кодирование, отладку, тестирование, модификацию и поддержку. Трудоемкость этапов разработки зависит от сложности программы и требований к ней.

14. Алгоритм программы - это последовательность действий, которые должны быть выполнены для ее решения. Назначение алгоритмов - упрощение и автоматизация задач. Свойства алгоритмов включают в себя согласованность, конкретность, оптимальность и воспроизводимость. Алгоритмы могут быть описаны в форме графа, последовательности или дерева.

15. Системы программирования Microsoft, Linux, Unix и IBM являются наиболее распространенными системами программирования. Стандарты языков программирования определяют какие языки и платформы могут быть использованы для разработки программного обеспечения. Существуют три основные парадигмы (стили) программирования: процедурное, объектно-ориентированное и функциональное программирование.

16. Интегрированная среда разработки (IDE) - это набор инструментов для разработки программного обеспечения, который включает в себя редактор исходного кода, отладчик и компилятор. Основные возможности IDE включают в себя автоматическое форматирование кода, поддержку различных языков программирования, подстановку кода, автоматическое дополнение кода, интегрированные инструменты для работы с базами данных и т.д.

17. Microsoft Visual Studio 2019 – это интегрированная среда разработки, которая позволяет разработчикам создавать приложения для различных платформ, включая Windows, iOS, Android и другие. В Visual Studio есть настраиваемые инструменты для создания и отладки приложений, а также для сохранения времени и ускорения процесса разработки.

18. Среда разработки - это программное обеспечение, которое помогает разработчику создавать, отлаживать и дебажить приложения. Она позволяет разработчику установить точки остановки, просматривать и модифицировать локальные данные, выполнять отладку пошагово и понимать и использовать дизассемблер.

19. Методология разработки программного обеспечения - это процесс создания программного обеспечения, который включает в себя различные этапы, включая анализ, проектирование, программирование, тестирование и документирование. Структурный подход к проектированию ПО основан на принципе модульности, предполагая, что программа может быть построена из нескольких модулей, каждый из которых может быть отдельно разработан, отлажен и протестирован. Для реализации структурного подхода используются различные методы структурного программирования, включая структурное программирование, модульное программирование, программирование на основе объектов и другие.

20. Методология разработки программного обеспечения – это процесс разработки и обслуживания ПО, который включает в себя различные методы, процессы, средства и технологии для обеспечения более профессиональной и продуктивной разработки программного обеспечения.

Модульное программирование – это процесс разработки программного обеспечения, в котором программа разбивается на модули и объединяется для достижения желаемого результата. Этот подход позволяет разработчикам снизить время и усилия, необходимые для разработки программного обеспечения, поскольку модули можно использовать несколько раз.

Сущность структурного подхода – это процесс разработки программного обеспечения, в котором программа разбивается на более мелкие части и объединяется в одну программу. Этот подход позволяет разработчикам иметь более подробное понимание и представление о программе, а также обеспечивает лучшую структуру и модульность программы.

Методы модульного программирования – это различные методы, используемые для разработки модульного программного обеспечения. Эти методы включают в себя методы, такие как модульное тестирование, анализ потока данных и дизайн модульной архитектуры.

21. Системы контроля версий (СКВ) – это системы для управления изменениями в коде. Они позволяют разработчикам отслеживать изменения, откатываться к ранее работоспособным версиям кода, а также делиться кодом с другими разработчиками. Они могут быть классифицированы как локальные или централизованные. Локальные системы контроля версий (ЛСКВ) позволяют отслеживать изменения файлов на локальном компьютере, а централизованные системы контроля версий (ЦСКВ) позволяют отслеживать изменения файлов в централизованной базе данных. Наиболее известные системы контроля версий – это Git, Subversion, Mercurial и CVS.

Git – это дистрибутивная система контроля версий, которая позволяет разработчикам отслеживать изменения в исходном коде и истории изменений. В базовом виде она позволяет разработчикам фиксировать состояние исходного кода в разных версиях, создавать разные ветви проекта для различных изменений и сливать их обратно в основную ветку. Она также поддерживает распределенную разработку, поскольку каждый разработчик может иметь локальную копию проекта на своем компьютере и делиться изменениями с другими разработчиками. 

22. GitHub – это веб-сервис на основе системы контроля версий Git, который предоставляет удобный интерфейс для хранения и совместной работы над проектами. Он позволяет разработчикам создавать и отслеживать задачи, обмениваться комментариями и выполнять процесс разработки и развертывания программного обеспечения, включая создание и слияние ветвей проектов.

23. Этапы создания программного продукта включают в себя анализ потребностей, разработку архитектуры и интерфейса, создание программы, тестирование и развертывание. Жизненный цикл разработки программного обеспечения – это процесс последовательных этапов создания и поддержки программного продукта. Назначением модели жизненного цикла ПО является организация процессов разработки и поддержки программного продукта. Структура процессов жизненного цикла программного обеспечения зависит от выбранной модели. 

24. Каскадная модель жизненного цикла ПС – это последовательность этапов, выполняющихся последовательно друг за другом. Она подразумевает использование процессов анализа, проектирования, реализации и тестирования. Такой подход применяется для крупных проектов, где обеспечение качества и полнота продукта очень важны. Достоинства каскадной модели жизненного цикла ПС – простота, полнота продукта, понятность и документирование. Недостатки – длительное время разработки и высокая стоимость.

25. Эволюционная модель жизненного цикла ПС – это последовательность действий, связанных с внесением изменений в программное обеспечение по мере необходимости. Такой подход часто используется в разработке программного обеспечения малых и средних размеров. Преимущества эволюционной модели жизненного цикла ПС – эффективное использование ресурсов, простота внесения изменений, возможность быстрого прототипирования. Недостатки – отсутствие точного плана разработки, непредсказуемость результата.

26. Спиральная модель разработки ПО – это модель, представляющая собой последовательность этапов, при которой проект проходит циклы анализа, проектирования, реализации и тестирования. Эта модель подходит для разработки больших, сложных проектов, требующих большого времени на разработку. Преимущества спиральной модели – возможность изменения плана в процессе разработки, возможность постоянного контроля качества, возможность быстро отразить изменения требований. Недостатки – высокая стоимость проекта и большая сложность.

27. Инкрементальная модель разработки ПО – это модель, предусматривающая разработку ПО путем последовательного разбиения требований на более мелкие части, которые могут быть разработаны и интегрированы в проект по мере их готовности. Развитие инкрементного подхода позволяет упростить процесс разработки и направить его на решение более практических задач. В процессе инкрементной модели разработки ПО могут быть использованы процессы XP (Extreme Programming).

28. Методологии разработки программного обеспечения это различные подходы и методы, которые используются для разработки ПО. Инструментарий технологии программирования представляет собой набор средств, применяемых для разработки, отладки, исполнения и поддержки ПО. Управление требованиями подразумевает определение, анализ, документирование, трактовку и внесение изменений в требования к ПО. Техническое задание на разработку программного продукта описывает потребности пользователей и требования к продукту.

29. Методологии быстрой разработки ПО – это один из подходов к разработке ПО, который оптимизирует время и затраты на разработку. Жизненный цикл ПО по методологии RAD (Rapid Application Development) основан на принципах и инструментах, которые максимально сокращают процесс разработки ПО. Преимущества методологии RAD включают в себя быстрое прототипирование, возможность проведения постоянной диагностики, поддержку краткосрочного планирования и уменьшение затрат. Недостатки методологии RAD включают в себя возможное нарушение баланса между процессом разработки и качеством продукта, а также невозможность достичь сложных целей. Область применения методологии RAD включает в себя проекты с большим количеством изменений и проекты, требующие оперативных решений.

30. Инкрементальная модель разработки ПО подразумевает наращивание программного обеспечения по мере достижения определенных целей. Итерационная модель разработки ПО представляет собой повторяющиеся циклы разработки, которые повторяются несколько раз до достижения окончательной цели. Отличие итерационной модели от инкрементной модели заключается в том, что итерационная модель предполагает доработку продукта после каждой итерации, что обеспечивает лучшее качество продукта.


31. Методологии гибкой разработки ПО - это различные методики, такие как Scrum, Kanban, Extreme Programming. Они отличаются друг от друга своими подходами к разработке ПО. Agile предполагает более гибкую модель разработки, где изменения допускаются по мере их появления. Традиционный подход к разработке ПО основывается на последовательном, планомерном процессе разработки. Гибкие методологии разработки позволяют скорее отвечать на требования рынка и изменения в условиях, в которых разрабатывается продукт. Однако они также имеют минусы, такие как более высокие расходы и более высокий уровень нестабильности, которые могут привести к просрочке проектов.

32. Модель компетентного разработчика (Personal Software Process) - это фреймворк, который позволяет разработчикам использовать продуманные процессы для оценки, планирования, исполнения и улучшения своей работы. Он предлагает процессы и методики для планирования, оценки и измерения производительности разработчиков и проектов.

33. Этапы конструирования - это этапы проектирования, разработки, испытаний, управления и оптимизации программного обеспечения. Подходы к конструированию программных средств объединяют набор инструментов и методов, которые используются для разработки программного обеспечения.

34. Технологии разработки ПО - это методы и инструменты, которые используются для разработки программного обеспечения. Управление требованиями предполагает использование технологий для сбора, оценки, классификации и внесения изменений в требования проекта. Требования представляют собой функциональные и нефункциональные требования, которые должны быть выполнены для создания качественного продукта.

35. Формализация функциональных требований - это процесс преобразования требований проекта в форму, понятную для компьютера. Диаграммы вариантов использования (Use Case Diagrams) используются для представления функциональных требований. Они показывают взаимодействие пользователя с системой, а также взаимодействие между различными акторами и системой. Они состоят из актора, который является пользователем системы и использует ее, и сценария, которые описывают действия актора.

36. Тестирование ПО - это процесс проверки программного обеспечения на наличие ошибок и пригодность для использования. Оно включает в себя классификацию видов тестирования, таких как функциональное, интеграционное, системное и регрессионное тестирование. Цели тестирования включают в себя исследование программы для обнаружения ошибок, проверку правильности работы и оценку качества. Принципы тестирования включают в себя раннее тестирование, объективное тестирование, тестирование на основе требований и автоматизированное тестирование.

37. Тестирование ПО — это процесс проверки и оценки функциональности программного обеспечения для обнаружения ошибок, проверки их функциональности и проверки соблюдения требований. Основные методы тестирования ПО: ручное тестирование, автоматизированное тестирование, стрессовое тестирование, тестирование безопасности, тестирование производительности и т. д. Ручное тестирование - это процесс использования ручных методов для выявления ошибок и проверки функциональности ПО.

38. Разработка программной документации - это процесс создания документов, которые описывают, как работает программное обеспечение. Назначение документирования программного обеспечения состоит в том, чтобы обеспечить понятное и доступное понимание того, как работает программное обеспечение. Стандарты документирования формируют требования к документированию программного обеспечения, такие как структура, формат и содержание.

39.Управление командой проекта - это управление процессом работы команды над проектом. Это включает в себя распределение задач между участниками проекта, постановку целей и планирование сроков, мониторинг выполнения и контроль качества. Также могут потребоваться мероприятия по улучшению командной работы, внесение изменений в процессы и принятие решений.